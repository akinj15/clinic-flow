// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Medico {
  id            String     @id @default(uuid())
  cpf           String     @unique
  crm           String
  nomeCompleto  String
  email         String
  telefone      String
  especialidade String
  setor         String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  feedbacks     Feedback[]
}

model Feedback {
  id            String   @id @default(uuid())
  medicoId      String
  medico        Medico   @relation(fields: [medicoId], references: [id], onDelete: Cascade)
  estado        String
  especialidade String
  setor         String
  unidade       String
  tipoAbordagem String
  detalhes      String
  feedback      Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Unidade {
  id        String   @id @default(uuid())
  nome      String
  estado    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TipoAbordagem {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setor {
  id        String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
